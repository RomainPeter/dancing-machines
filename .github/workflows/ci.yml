name: CI

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  expected-fail:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.lock
      - name: Expected fail (policy_violation)
        run: |
          set +e
          python scripts/verifier.py --pcap examples/expected_fail/pcap-secret.json
          test $? -ne 0 && echo "Expected failure OK" && exit 0
          echo "Verifier should have failed" && exit 1

  sbom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate SBOM
        run: |
          python -c "
          import json
          import subprocess
          import sys
          
          # Simple SBOM generation
          sbom = {
            'spdxVersion': 'SPDX-2.3',
            'dataLicense': 'CC0-1.0',
            'SPDXID': 'SPDXRef-DOCUMENT',
            'name': 'dancing-machines',
            'packages': []
          }
          
          # Get pip freeze output
          result = subprocess.run([sys.executable, '-m', 'pip', 'freeze'], 
                                capture_output=True, text=True)
          for line in result.stdout.strip().split('\n'):
            if '==' in line:
              name, version = line.split('==', 1)
              sbom['packages'].append({
                'SPDXID': f'SPDXRef-{name}',
                'name': name,
                'versionInfo': version,
                'downloadLocation': 'NOASSERTION'
              })
          
          with open('sbom.spdx.json', 'w') as f:
            json.dump(sbom, f, indent=2)
          "
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.lock') }}
      
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.lock
          pip install pre-commit black ruff jsonschema

      - name: Prepare env
        shell: bash
        run: |
          echo "OPENROUTER_MODEL=${{ secrets.OPENROUTER_MODEL }}" >> $GITHUB_ENV
          if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ]; then
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> $GITHUB_ENV
          fi

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

      - name: Run schema validation
        run: python scripts/test_roundtrip.py

      - name: Run LLM tests (offline)
        run: |
          python -m pytest tests/test_llm_client_v2.py -v
          python -m pytest tests/test_orchestrator_llm.py -v

      - name: Verify (online if key, else skip)
        shell: bash
        run: |
          if [ -n "${{ secrets.OPENROUTER_API_KEY }}" ]; then
            python scripts/verify.py
          else
            echo "No API key: skipping online verify"
          fi

      - name: Demo + Audit (replay/offline expected)
        shell: bash
        run: |
          python scripts/demo.py || true
          python scripts/audit_pack.py || true
          python scripts/make_logs.py || true

      - name: Run demo-s1 (stub)
        run: python orchestrator/skeleton.py --plan plans/plan-hello.json --state state/x-hello.json

      - name: Run demo-s1-llm (mock)
        run: python orchestrator/skeleton_llm.py --plan plans/plan-hello.json --state state/x-hello.json --llm mock

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit-pack
          path: |
            out/
            LOGS.md
            docs/2pager.md
          if-no-files-found: warn

  demo-s1-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.lock
      - name: Build verifier image
        run: docker build -t proofengine/verifier:0.1.0 -f Dockerfile.verifier .
      - name: Demo S1 (docker verifier)
        run: python orchestrator/skeleton_llm.py --plan plans/plan-hello.json --state state/x-hello.json --llm mock --verifier docker
      - name: Egress test must fail
        run: |
          set +e
          docker run --rm --network=none busybox sh -c "wget -qO- https://example.com"
          test $? -ne 0 && echo "No egress OK" && exit 0
          echo "Egress unexpectedly allowed" && exit 1
      - uses: actions/upload-artifact@v4
        with: { name: audit-pack-docker, path: artifacts/ }

  expected-fail-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install -r requirements.lock
      - run: docker build -t proofengine/verifier:0.1.0 -f Dockerfile.verifier .
      - name: Expected fail (policy_violation, docker)
        run: |
          set +e
          python scripts/verifier.py --runner docker --pcap examples/expected_fail/pcap-secret.json
          test $? -ne 0 && echo "Expected failure OK" && exit 0
          echo "Verifier should have failed" && exit 1

  macos-tests:
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.lock') }}
      - run: pip install -r requirements.lock
      - run: pytest -q -k "not docker"  # skip docker tests
      - run: make validate
      - run: python scripts/test_roundtrip.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit-pack
          path: |
            out/
            LOGS.md
            docs/2pager.md
          if-no-files-found: warn
