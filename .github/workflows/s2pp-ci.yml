name: S2++ CI Pipeline

on:
  push:
    branches: [ main, feature/s2pp-delta-v2 ]
  pull_request:
    branches: [ main ]

jobs:
  s2pp-shadow:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r spec_pack/requirements.txt
    
    - name: Run S2++ shadow mode
      run: |
        make s2pp-shadow
        python scripts/bench_2cat.py --suite corpus/s2pp/suite.json --modes baseline --runs 1 --out artifacts/s2pp/shadow
    
    - name: Upload shadow artifacts
      uses: actions/upload-artifact@v3
      with:
        name: s2pp-shadow-artifacts
        path: artifacts/s2pp/shadow/

  s2pp-active:
    runs-on: ubuntu-latest
    needs: s2pp-shadow
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r spec_pack/requirements.txt
    
    - name: Run S2++ active mode
      run: |
        make s2pp-active
        python scripts/bench_2cat.py --suite corpus/s2pp/suite.json --modes active --runs 1 --out artifacts/s2pp/active
    
    - name: Upload active artifacts
      uses: actions/upload-artifact@v3
      with:
        name: s2pp-active-artifacts
        path: artifacts/s2pp/active/

  expected-fail-s2pp:
    runs-on: ubuntu-latest
    needs: [s2pp-shadow, s2pp-active]
    strategy:
      matrix:
        category: [api-governance, supply-chain, security-compliance, robustness]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r spec_pack/requirements.txt
    
    - name: Run expected fail tests
      run: |
        python scripts/bench_2cat.py --suite corpus/s2pp/suite.json --modes expected_fail --runs 1 --out artifacts/s2pp/expected_fail_${{ matrix.category }}
    
    - name: Verify expected failures
      run: |
        # Check that expected fail tests actually fail
        python -c "
        import json
        with open('artifacts/s2pp/expected_fail_${{ matrix.category }}/results.json') as f:
            results = json.load(f)
        for result in results:
            if result['success']:
                print(f'ERROR: Expected fail test {result[\"case_name\"]} passed')
                exit(1)
        print('All expected fail tests failed as expected')
        "
    
    - name: Upload expected fail artifacts
      uses: actions/upload-artifact@v3
      with:
        name: s2pp-expected-fail-${{ matrix.category }}
        path: artifacts/s2pp/expected_fail_${{ matrix.category }}/

  bench-s2pp:
    runs-on: ubuntu-latest
    needs: [s2pp-shadow, s2pp-active, expected-fail-s2pp]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r spec_pack/requirements.txt
    
    - name: Run full benchmark
      run: |
        python scripts/bench_2cat.py --suite corpus/s2pp/suite.json --modes baseline,active --runs 3 --out artifacts/s2pp/bench
    
    - name: Run delta calibration
      run: |
        python scripts/delta_calibrate.py --input artifacts/s2pp/bench/metrics.csv --out configs/weights_v2.json --report artifacts/s2pp/delta_report.json --bootstrap 1000
    
    - name: Verify gates
      run: |
        python -c "
        import json
        with open('artifacts/s2pp/bench/metrics.json') as f:
            metrics = json.load(f)
        
        # Check delta success rate
        delta_success = metrics['delta']['success_rate_delta']
        if delta_success < 0.1:
            print(f'ERROR: Delta success rate {delta_success} < 0.1')
            exit(1)
        
        # Check overhead
        overhead = metrics['delta']['overhead_percent']
        if overhead > 15:
            print(f'ERROR: Overhead {overhead}% > 15%')
            exit(1)
        
        # Check replans
        replans = metrics['active']['avg_replans']
        if replans > 2:
            print(f'ERROR: Average replans {replans} > 2')
            exit(1)
        
        # Check cycles
        cycles = metrics['active']['avg_cycles']
        if cycles > 0:
            print(f'ERROR: Average cycles {cycles} > 0')
            exit(1)
        
        print('All gates passed!')
        "
    
    - name: Generate audit pack
      run: |
        make repro-public-s2pp
    
    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v3
      with:
        name: s2pp-bench-artifacts
        path: artifacts/s2pp/bench/
    
    - name: Upload audit pack
      uses: actions/upload-artifact@v3
      with:
        name: s2pp-audit-pack
        path: artifacts/s2pp/audit_pack.zip
