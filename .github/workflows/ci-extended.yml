name: CI Extended

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
    
    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.github.io/gatekeeper/charts/opa-latest-linux-amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/
        opa version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run linting
      run: |
        black --check .
        ruff check .
    
    - name: Run tests
      run: |
        pytest -v tests/
    
    - name: Run Discovery Engine tests
      run: |
        pytest -v tests/test_ae_loop.py tests/test_egraph.py tests/test_policy_selection.py tests/test_prompt_contract.py tests/test_incident_handlers.py
    
    - name: Run RegTech demo
      run: |
        python scripts/demo_regtech_bench.py
    
    - name: Generate Merkle journal
      run: |
        python scripts/merkle_journal.py
    
    - name: Test hermetic runner
      run: |
        python runner/hermetic_stub.py
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          out/
          *.log
          test-results/
    
    - name: Upload OPA policies
      uses: actions/upload-artifact@v4
      with:
        name: opa-policies
        path: |
          demo/regtech/policies/
          policy/
    
    - name: Upload schemas
      uses: actions/upload-artifact@v4
      with:
        name: schemas
        path: |
          schemas/
          specs/

  demo:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.github.io/gatekeeper/charts/opa-latest-linux-amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full Discovery Engine demo
      run: |
        python scripts/demo_regtech_bench.py
    
    - name: Generate Merkle root
      run: |
        python scripts/merkle_journal.py > merkle.txt
        echo "Merkle root: $(cat merkle.txt)"
    
    - name: Upload demo artifacts
      uses: actions/upload-artifact@v4
      with:
        name: demo-artifacts
        path: |
          out/
          merkle.txt
          *.json
          *.jsonl
    
    - name: Generate attestation
      run: |
        echo "Discovery Engine 2-Cat Demo Completed" > attestation.txt
        echo "Timestamp: $(date)" >> attestation.txt
        echo "Merkle Root: $(cat merkle.txt)" >> attestation.txt
        echo "Artifacts: out/" >> attestation.txt
    
    - name: Upload attestation
      uses: actions/upload-artifact@v4
      with:
        name: attestation
        path: attestation.txt

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          trivy-results.sarif
          bandit-results.json
